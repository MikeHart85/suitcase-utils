import bluesky # noqa
from bluesky.tests.conftest import RE # noqa
from bluesky.plans import count # noqa
from bluesky.plan_stubs import trigger_and_read, configure
import event_model # noqa
from ophyd.tests.conftest import hw # noqa
import pytest # noqa
from . import UnknownEventType # noqa

_md = { 'reason': 'test', 'user': 'temp user', 'beamline': 'test_beamline'}

# Some useful plans for use in testing
def simple_plan(dets):
    '''A simple plane which runs count with num=5'''
    md = {**_md, **{'test_plan_name': 'simple_plan'}}
    yield from count(dets, num=5, md = md)


def multi_stream_one_descriptor_plan(dets):
    '''A plan that has two streams but on descriptor per stream)'''
    md = {**_md, **{'test_plan_name': 'multi_stream_one_descriptor_plan'}}
    @bluesky.preprocessors.baseline_decorator(dets)
    def _plan(dets):
        yield from count(dets, md=md)

    yield from _plan(dets)


def one_stream_multi_descriptors_plan(dets):
    '''A plan that has one stream but two descriptors per stream)'''
    md = {**_md, **{'test_plan_name': 'simple_plan'}}
    @bluesky.preprocessors.run_decorator(md=md)
    def _internal_plan(dets):
        yield from trigger_and_read(dets)
        for det in dets:
            yield from configure(det, {})
        yield from trigger_and_read(dets)

    yield from _internal_plan(dets)


@pytest.fixture(params=[['det'], ['direct_img'], ['det', 'direct_img']],
                scope='function')
def detector_list(hw, request):
    dets = [getattr(hw, det_name) for det_name in request.param]
    return dets


@pytest.fixture(params=['event', 'bulk_events', 'event_page'],
                scope='function')
def event_type(request):
    return  request.param


@pytest.fixture()
def events_data(RE, detector_list, event_type):
    '''A fixture that returnsevent data for a number of test cases.

    Returns a list of (name, doc) tuples for the plan passed in as an arg.

    Parameters
    ----------
    RE : object
        pytest fixture object imported from `bluesky.test.conftest`
    detector_list : list
        pytest fixture defined in `suitcase.utils.conftest` which returns a
        list of detectors
    event_type : list
        pytest fixture defined in `suitcase.utils.conftest` which returns a
        list of 'event_types'.
    '''

    def _events_data_func(plan):
        '''Generates data to be used for testing of suitcase.*.export(..)
        functions

        Parameters
        ----------
        plan : the plan to use to generate the test data

        Returns
        -------
        collector : list
            A list of (name, doc) tuple pairs generated by the run engine.
        '''

        # define the output lists and an internal list.
        collector = []
        event_list = []

        # define the collector function depending on the event_type
        if event_type == 'event':
            def collect(name, doc):
                collector.append((name, doc))
                if name == 'event':
                    event_list.append(doc)
        elif event_type == 'event_page':
            def collect(name, doc):
                if name == 'event':
                    event_list.append(doc)
                elif name == 'stop':
                    collector.append(('event_page',
                                      event_model.pack_event_page(
                                          *event_list)))
                    collector.append((name, doc))
                else:
                    collector.append((name, doc))
        elif event_type == 'bulk_events':
            def collect(name, doc):
                if name == 'event':
                    event_list.append(doc)
                elif name == 'stop':
                    collector.append(('bulk_events', {'primary': event_list}))
                    collector.append((name, doc))
                else:
                    collector.append((name, doc))
        else:
            raise UnknownEventType('Unknown event_type kwarg passed to '
                                   'suitcase.utils.events_data')

        # collect the documents
        RE.subscribe(collect)
        RE(plan(detector_list))

        return collector

    return _events_data_func
